from __future__ import with_statement
import os
from setuptools import setup

# Do not update the version manually - it is managed by `bumpversion`.
version = '2.0.1rc'

setup(
    name='pydocstyle',
    version=version,
    description="Python docstring style checker",
    long_description=open('README.rst').read(),
    license='MIT',
    author='Amir Rachum',
    author_email='amir@rachum.com',
    url='https://github.com/PyCQA/pydocstyle/',
    classifiers=[
        'Intended Audience :: Developers',
        'Environment :: Console',
        'Programming Language :: Python :: 2',
        'Programming Language :: Python :: 3',
        'Operating System :: OS Independent',
        'License :: OSI Approved :: MIT License',
    ],
    keywords='pydocstyle, PEP 257, pep257, PEP 8, pep8, docstrings',
    packages=('pydocstyle',),
    package_dir={'': 'src'},
    package_data={'pydocstyle': ['data/*.txt']},
    install_requires=[
        'snowballstemmer',
        'six',
    ],
    entry_points={
        'console_scripts': [
            'pydocstyle = pydocstyle.cli:main',
        ],
    },
)






#!/usr/bin/env python

from os.path import dirname, join
import octodns

try:
    from setuptools import find_packages, setup
except ImportError:
    from distutils.core import find_packages, setup

cmds = (
    'compare',
    'dump',
    'report',
    'sync',
    'validate'
)
cmds_dir = join(dirname(__file__), 'octodns', 'cmds')
console_scripts = {
    'octodns-{name} = octodns.cmds.{name}:main'.format(name=name)
    for name in cmds
}

setup(
    author='Ross McFarland',
    author_email='rwmcfa1@gmail.com',
    description=octodns.__doc__,
    entry_points={
        'console_scripts': console_scripts,
    },
    install_requires=[
        'PyYaml>=3.12',
        'dnspython>=1.15.0',
        'futures>=3.0.5',
        'incf.countryutils>=1.0',
        'ipaddress>=1.0.18',
        'python-dateutil>=2.6.0',
        'requests>=2.13.0'
    ],
    license='MIT',
    long_description=open('README.md').read(),
    name='octodns',
    packages=find_packages(),
    url='https://github.com/github/octodns',
    version=octodns.__VERSION__,
)










from setuptools import setup

setup(
    name="Tree",
    version="0.1b8",
    description="A package for creating and drawing trees",
    url="https://github.com/PixelwarStudio/PyTree",
    author="Pixelwar",
    author_email='janko.matthes@gmx.net',
    classifiers=[
        "Development Status :: 4 - Beta",
        "Intended Audience :: Developers",
        "License :: OSI Approved :: MIT License",
        "Programming Language :: Python :: 2.7",
        "Programming Language :: Python :: 3.5",
        "Topic :: Scientific/Engineering :: Mathematics",
    ],
    install_requires=[
        "Pillow",
        "svgwrite"
    ],
    license="MIT",
    packages=["Tree"],
    zip_safe=False
)






from setuptools import setup

setup(
    name='howmanypeoplearearound',
    packages=['howmanypeoplearearound'],
    version='0.3.4',
    description='A tshark wrapper to count the number of cellphones in the vicinity',
    author='schollz',
    url='https://github.com/schollz/howmanypeoplearearound',
    author_email='hypercube.platforms@gmail.com',
    download_url='https://github.com/schollz/howmanypeoplearearound/archive/v0.3.4.tar.gz',
    keywords=['tshark', 'wifi', 'location'],
    classifiers=[],
    install_requires=[
        "click",
        "netifaces",
        "pick",
    ],
    setup_requires=[],
    tests_require=[],
    entry_points={'console_scripts': [
        'howmanypeoplearearound = howmanypeoplearearound.__main__:main',
    ], },
)






#!/usr/bin/env python

from setuptools import setup

setup(
    name='clize',
    version='4.0.1',
    description='Turn functions into command-line interfaces',
    license='MIT',
    url='https://github.com/epsy/clize',
    author='Yann Kaiser',
    author_email='kaiser.yann@gmail.com',
    install_requires=[
        'six',
        'sigtools >= 2.0',
        'attrs',
        'od',
        'docutils',
    ],
    tests_require=[
        'repeated_test',
        'unittest2',
        'python-dateutil',
        'Pygments',
    ],
    extras_require={
        'datetime': ['python-dateutil'],
    },
    packages=('clize', 'clize.tests'),
    test_suite='clize.tests',
    keywords=[
        'CLI', 'options', 'arguments', 'getopts', 'getopt', 'argparse',
        'introspection', 'flags', 'decorator', 'subcommands',
        ],
    classifiers=[
        "Development Status :: 5 - Production/Stable",
        "License :: OSI Approved :: MIT License",
        "Programming Language :: Python :: 2",
        "Programming Language :: Python :: 2.7",
        "Programming Language :: Python :: 3",
        "Programming Language :: Python :: 3.3",
        "Programming Language :: Python :: 3.4",
        "Programming Language :: Python :: 3.5",
        "Programming Language :: Python :: 3.6",
        "Programming Language :: Python :: Implementation :: CPython",
        "Programming Language :: Python :: Implementation :: PyPy",
        "Environment :: Console",
        "Intended Audience :: Developers",
        "Intended Audience :: System Administrators",
        "Operating System :: OS Independent",
        "Topic :: Software Development",
        "Topic :: Software Development :: Libraries :: Python Modules",
        "Topic :: Software Development :: User Interfaces",
        ],
)






from setuptools import setup

setup(name='timy',
      version='0.3.3',
      description='Minimalist measurement of python code time',
      url='https://github.com/ramonsaraiva/timy',
      author='Ramon Saraiva',
      author_email='ramonsaraiva@gmail.com',
      license='MIT',
      packages=['timy'],
      zip_safe=False)
      
      
      
      
      
      
      from setuptools import setup
import os

NAME = "weightedcalcs"
HERE = os.path.abspath(os.path.dirname(__file__))

version_ns = {}
with open(os.path.join(HERE, NAME, '__version__.py')) as f:
    exec(f.read(), {}, version_ns)

setup(
    name=NAME,
    version=version_ns['__version__'],
    description="Pandas-based utility to calculate weighted means, medians, distributions, standard deviations, and more.",
    url="http://github.com/jsvine/weightedcalcs",
    author="Jeremy Singer-Vine",
    author_email="jsvine@gmail.com",
    license="MIT",
    packages=[
        NAME
    ],
    install_requires=[
        "pandas>=0.19"
    ],
    classifiers=[
        "License :: OSI Approved :: MIT License",
        "Operating System :: OS Independent",
        "Programming Language :: Python :: 2",
        "Programming Language :: Python :: 2.7",
        "Programming Language :: Python :: 3",
        "Programming Language :: Python :: 3.4",
        "Programming Language :: Python :: 3.5",
        "Programming Language :: Python :: 3.6",
        "Intended Audience :: Developers",
        "Intended Audience :: Science/Research",
        "Topic :: Scientific/Engineering :: Information Analysis",
    ],
)






# Cashier setup.py script
#
# It doesn't depend on setuptools, but if setuptools is available it'll use
# some of its features, like package dependencies.

import os
# Compile the list of packages available, because distutils doesn't have
# an easy way to do this.
base_dir = os.path.dirname(__file__)


setup_args = {
    'name': 'cashier',
    'version': '1.3',
    'url': 'http://atmb4u.github.io/cashier',
    'description': 'Caching for python functions',
    'author': 'Anoop Thomas Mathew',
    'author_email': 'atmb4u@gmail.com',
    'license': 'BSD',
    'include_package_data': True,
    'py_modules': ['cashier/__init__'],
    'classifiers': [
        'Programming Language :: Python',
        'Programming Language :: Python :: 2.7',
        'Programming Language :: Python :: 3.5',
        'License :: OSI Approved :: BSD License',
        'Operating System :: OS Independent',
        'Intended Audience :: Developers',
        'Environment :: Console',
        'Topic :: Software Development :: Libraries :: Python Modules'
    ]
}

packages = [
    "cashier",
]

from distutils.core import setup
setup(**setup_args)





#!/usr/bin/env python
# -*- coding: utf-8 -*-


try:
    from setuptools import setup
except ImportError:
    from distutils.core import setup


setup(
    name='photos2geojson',
    version='1.2',
    description="Makes geojson from EXIF data.",
    author="Visgean Skeloru",
    author_email='visgean@gmail.com',
    url='https://github.com/visgean/photos2geojson',
    packages=[
        'photos2geojson',
    ],
    package_dir={'photos2geojson': 'photos2geojson'},
    license="MIT",
    keywords='photos geojson exif',
    classifiers=[
        'License :: OSI Approved :: MIT License',
        'Programming Language :: Python :: 3',
        'Programming Language :: Python :: 3.5',
    ],
    install_requires=[
        'requests',
        'exifread',
    ],
    entry_points={
        'console_scripts': [
            'photos2geojson = photos2geojson.main:main'
        ]
    },
    package_data={
        'photos2geojson': ['*.html']
    },
)






